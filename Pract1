Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з практичної роботи № 1
з дисципліни «Аналіз та рефакторинг коду»
на тему «Правила оформлення програмного коду»




Виконав
студент групи ПЗПІ-22-7
	

Сахань Дмитро Олександрович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	



















Харків, 2024
Мета роботи
Опанувати навички рефакторингу програмного коду та закріпити ключові принципи його оформлення.


2. Завдання
Дослідити основні рекомендації для написання якісного коду на Java.
Продемонструвати ці рекомендації на прикладах коду.
Обґрунтувати кожну рекомендацію та надати детальні пояснення.
Підготувати презентацію на основі досліджень.

3. Хід роботи
Мною було обрано мову програмування Java. У презентації (Додаток А) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду до і після застосування цих рекомендацій.

Неправильно:
Назви функцій та змінних не відповідають стандартам.
Пропущено пробіли навколо операторів.
Відсутнє форматування, код важко читати.

// Погано
public class Example {
    public static int addNumbers(int a,int b){return a+b;}
    public static void main(String[]args){int sum=addNumbers(5,10);System.out.println(sum);}
}

//Правильно:
Назви функцій і змінних дотримуються стилю camelCase.
Додано пробіли навколо операторів.
Код структурований та легкий для читання.

// Добре
public class Example {
    public static int addNumbers(int firstNumber, int secondNumber) {
        return firstNumber + secondNumber;
    }

    public static void main(String[] args) {
        int sum = addNumbers(5, 10);
        System.out.println(sum);
    }
}

//Неправильно:
Назва класу та змінних не відповідають стандартам.
Поля класу названо неконкретно.
Зайві скорочення ускладнюють розуміння коду.


// Погано
class userAcc {
    String nm;
    double bal;
}

userAcc usr = new userAcc();
usr.nm = "Alice";
usr.bal = 100.0;

//Правильно:
Назва класу у стилі PascalCase.
Імена полів та змінних описові й зрозумілі.
Код став більш структурованим.

// Добре
class UserAccount {
    String name;
    double balance;
}

UserAccount user = new UserAccount();
user.name = "Alice";
user.balance = 100.0;
Неправильно:
Коментарі описують очевидні речі.
Дублюючі коментарі не додають корисної інформації.

// Погано
// Додавання двох чисел
public int add(int a, int b) { // Ця функція додає два числа
    return a + b; // результат додавання
}

// Створення користувача
class User {
    String name; // Ім'я користувача
    int age; // Вік користувача
}

//Правильно:
Коментарі додають корисну інформацію про код.
Використано формат документації для опису методів та класів.

// Добре
/**
 * Виконує додавання двох чисел.
 *
 * @param a перше число
 * @param b друге число
 * @return сума чисел a та b
 */
public int add(int a, int b) {
    return a + b;
}

/**
 * Клас, що представляє користувача.
 * Використовується для зберігання даних про користувачів програми.
 */
class User {
    /**
     * Ім'я користувача.
     */
    String name;

    /**
     * Вік користувача.
     * Використовується для перевірки прав доступу.
     */
    int age;
}
Отже, структурування та правильне форматування значно покращують читабельність і підтримуваність коду.































ДОДАТОК А
Використаний код для презентації

// Неправильно:
// - Відсутні відступи (все написано в один рядок).
// - Пропущені пробіли навколо операторів і після ком.
// - Назва функції не в snake_case.
// - Відсутня консистентність у форматуванні параметрів функції (a:i32,b :i32).
fn main(){let sum=calculateSum(5,10);println!("{}",sum);}
fn calculateSum(a:i32,b :i32)-> i32 {a+b}


// Правильно
fn main() {
        let sum = calculate_sum(5, 10);
        println!("{}", sum);
}


fn calculate_sum(a: i32, b: i32) -> i32 {
        a + b
}


///////////////////////////////////////////////////////////////


// Неправильно:
// - Функція має неконкретну назву (calc замість описової).
// - Назва структури не відповідає стилю (userAcc замість PascalCase).
// - Поля структури та змінні мають скорочені назви (bal, usr).
fn calc(a: i32, b: i32) -> i32 {
        a + b
}


struct userAcc {
        name: String,
        bal: f64,
}


let usr = userAcc {
        name: String::from("Alice"),
        bal: 100.0,
};


// Правильно
fn calculate_sum(a: i32, b: i32) -> i32 {
        a + b
}


struct UserAccount {
        name: String,
        balance: f64,
}


let user = UserAccount {
        name: String::from("Alice"),
        balance: 100.0,
};


///////////////////////////////////////////////////////////////////


// Неправильно:
// - Коментарі описують очевидні речі (додаємо два числа, вік користувача).
// - Надмірне дублювання в коментарях.
// - Відсутні пояснення, чому використовується певний підхід.


// Додаємо два числа
fn add(a: i32, b: i32) -> i32 { // Ця функція додає два числа
        a + b // результат додавання
}


// створення користувача
struct User {
        name: String,
        age: u32, // вік користувача
}


// Правильно:


/// Обчислює суму двох чисел.
///
/// # Arguments
/// - a - Перше число.
/// - b - Друге число.
///
/// # Returns
/// Сума чисел a та b.
fn add(a: i32, b: i32) -> i32 {
        a + b
}


/// Інформація про користувача програми.
struct User {
        /// Ім'я користувача.
        name: String,
        /// Вік користувача. Використовується для перевірки доступу до певних функцій.
        age: u32,
}




































ДОДАТОК Б
Презентація на тему «Правила оформлення програмного коду».
 
