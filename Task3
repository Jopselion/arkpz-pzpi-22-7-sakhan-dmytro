Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 3
з дисципліни «Аналіз та рефакторинг коду»
на тему «Розробка бізнес-логіки та функцій 
адміністрування серверної частини програмної системи»




Виконав
студент групи ПЗПІ-22-7
	

Сахань Дмитро Олександрович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	

















Харків, 2024
3.1 Мета роботи


Розробити бізнес-логику та функції адміністрування серверної частини програмної системи.


3.2 Хід роботи
3.2.1 Мета та функціональність бізнес-логіки

Бізнес-логіка серверної частини розроблена для забезпечення автоматизації, аналізу та оптимізації основних процесів, пов’язаних із моніторингом

1)Автоматичний моніторинг стану ґрунту через IoT-сенсори в реальному часі, зібрання даних про вологість, pH, азот, калій, фосфор та інші важливі параметри (MF-1).
2)Виявлення аномальних показників у ґрунті, таких як низький рівень поживних елементів або високий рівень кислотності, з автоматичним формуванням сповіщень для користувачів (MF-2).
3)Аналіз даних для генерації аналітичних звітів, виявлення проблемних ділянок на полі та формування рекомендацій щодо внесення добрив або змін у агротехнічні заходи (MF-3).
4)Ранжування та сегментація ділянок поля за різними критеріями, наприклад, за родючістю ґрунту або вмістом азоту, для покращення планування і використання ресурсів (MF-4).
5)Забезпечення налаштування параметрів системи та адміністрування доступу для різних ролей користувачів, з можливістю зміни налаштувань та перегляду тільки дозволених даних (MF-5).
6)Можливість для адміністратора переглядати та редагувати дані в системі, включаючи зміну результатів аналізів або налаштувань, що відображаються у датагрейв'ю (MF-6). Це дозволяє контролювати актуальність інформації і запобігати несанкціонованим змінам даних.
7)Генерація автоматичних звітів для адміністраторів, що включають показники ефективності використання добрив, прогнозування результатів та інші аналітичні дані для планування агрономічних заходів (MF-8).


        Переваги рішення включають автоматизацію ключових процесів, що зменшує участь людини в рутинних задачах. Система вирізняється гнучкістю, дозволяючи легко налаштовувати її під потреби користувачів. Також забезпечується масштабованість, яка дає можливість розширювати функціонал без значних змін у базовому коді. Крім того, аналітичний підхід допомагає ідентифікувати приховані проблеми та підвищити надійність роботи обладнання.




3.2.2 Особливості реалізації бізнес-логіки


        Бізнес-логіка була реалізована із врахуванням модульності та розширюваності. Основні принципи, використані під час розробки:
1. Модульність:
   1. Бізнес-логіка розділена на окремі функціональні модулі, що дозволяє легко масштабувати систему та додавати новий функціонал без значних змін у базовій структурі.
   2. Наприклад, обробка сенсорних даних, формування звітів та аналіз даних реалізовані у вигляді окремих функцій, що можуть повторно використовуватися.
2. Автоматизація процесів:
   1. Система автоматично збирає дані з датчиків, аналізує їх та визначає необхідність змінити показники.
   2. Автоматичне видалення старих даних, які не мають операційної цінності, для оптимізації використання бази даних.
3. Інтеграція аналітики:
   1. Для аналізу даних використовуються математичні методи, що дозволяють ідентифікувати проблеми з добривами, або сезонами.
   2. Вбудована аналітика дозволяє адміністраторам виявляти тренди у використанні обладнання та приймати обґрунтовані рішення.
4. Гнучкість налаштувань:
   1. Адміністративний аккаунт дозволяє змінювати порогові значення для таблиць а також редагувати правила формування звітів.
   2. Налаштування системи інтегроване у бізнес-логіку, що забезпечує зручність використання для адміністративного персоналу.
5. Безпека:
   1. Забезпечується розподілення доступу до адміністративних функцій та бізнес-логіки на основі ролей користувачів.
   2. Дані сенсорів та звіти передаються з використанням зашифрованих протоколів.


3.2.3 Функції адміністрування
        Функції адміністрування включають можливість взаємодії адміністратора із системою для управління користувачами, зміни параметрів роботи системи та таблиць. Основні функції:
1. Управління параметрами системи:
   1. Налаштування періодичності збору даних із датчиків.
   2. Зміна порогових значень для спрацювання аварійних сповіщень.
2. Моніторинг статусу системи:
   1. Надання адміністраторам доступу до звітів про стан обладнання.
   2. Відображення інтерактивної карти з активними аварійними сигналами (MF-4).
3. Управління ролями та доступом:
   1. Розподіл ролей між адміністраторами та іншими користувачами.
   2. Логування змін у параметрах системи для забезпечення аудиту дій адміністративного персоналу.




3.2.4 UML-діаграми


  

Рисунок 3.1 — UML-діаграма діяльності для серверної частини


  

Рисунок 3.2 — UML-діаграма взаємодії для серверної частини


3.3 Висновки


        Під час виконання лабораторної роботи було програмно реалізовано бізнес-логіку та систему адміністрування програмної системи моніторингу ліфтів у житлових комплексах.
        Посилання на відеопрезентацію: 
        Посилання на Github-репозиторій: 
       Посилання на Github-репозиторій програмного файлу:


ДОДАТОК А
1. Фрагмент програмного коду бізнес-логіки серверної частини (C#)
Цей фрагмент коду відповідає за логіку обробки даних ґрунту, генерацію рекомендацій на основі аналізу та підготовку звітів для користувачів.
// Клас для обробки даних ґрунту та генерації рекомендацій
public class SoilAnalysisService
{
    private readonly ISoilAnalysisRepository soilAnalysisRepository;
    private readonly IFertilizerRecommendationRepository fertilizerRecommendationRepository;

    // Конструктор класу, який ініціалізує репозиторії для взаємодії з БД
    public SoilAnalysisService(ISoilAnalysisRepository soilAnalysisRepository, IFertilizerRecommendationRepository fertilizerRecommendationRepository)
    {
        this.soilAnalysisRepository = soilAnalysisRepository;
        this.fertilizerRecommendationRepository = fertilizerRecommendationRepository;
    }

    // Метод для обробки даних аналізу ґрунту і генерації рекомендацій
    public Recommendation GenerateRecommendation(int soilAnalysisId)
    {
        SoilAnalysis soilAnalysis = soilAnalysisRepository.FindById(soilAnalysisId);

        // Логіка для обчислення рекомендацій на основі параметрів ґрунту
        if (soilAnalysis.Ph < 6.0)
        {
            return fertilizerRecommendationRepository.FindBySoilType("Acidic");
        }
        else if (soilAnalysis.Ph > 7.5)
        {
            return fertilizerRecommendationRepository.FindBySoilType("Alkaline");
        }
        else
        {
            return fertilizerRecommendationRepository.FindBySoilType("Neutral");
        }
    }

    // Метод для генерації звітів на основі даних ґрунту
    public string GenerateSoilReport(int soilAnalysisId)
    {
        SoilAnalysis soilAnalysis = soilAnalysisRepository.FindById(soilAnalysisId);

        string report = "Soil Report:\n";
        report += $"Location: {soilAnalysis.Location}\n";
        report += $"pH: {soilAnalysis.Ph}\n";
        report += $"Nitrogen: {soilAnalysis.Nitrogen} ppm\n";
        report += $"Potassium: {soilAnalysis.Potassium} ppm\n";
        report += $"Phosphorus: {soilAnalysis.Phosphorus} ppm\n";

        return report;
    }
}



2. Фрагмент програмного коду адміністрування серверної частини (C#)
Цей фрагмент коду відповідає за редагування даних ґрунту та добрив в системі, з перевіркою прав адміністратора.
// Клас для адміністрування та редагування даних ґрунту
public class AdminService
{
    private readonly ISoilAnalysisRepository soilAnalysisRepository;
    private readonly IFertilizerRecommendationRepository fertilizerRecommendationRepository;

    // Конструктор класу для ініціалізації репозиторіїв
    public AdminService(ISoilAnalysisRepository soilAnalysisRepository, IFertilizerRecommendationRepository fertilizerRecommendationRepository)
    {
        this.soilAnalysisRepository = soilAnalysisRepository;
        this.fertilizerRecommendationRepository = fertilizerRecommendationRepository;
    }

    // Метод для редагування аналізу ґрунту
    public void UpdateSoilAnalysis(int soilAnalysisId, SoilAnalysis updatedSoilAnalysis)
    {
        SoilAnalysis existingAnalysis = soilAnalysisRepository.FindById(soilAnalysisId);

        // Перевірка прав адміністратора для редагування
        if (IsAdmin())
        {
            existingAnalysis.Ph = updatedSoilAnalysis.Ph;
            existingAnalysis.Nitrogen = updatedSoilAnalysis.Nitrogen;
            existingAnalysis.Potassium = updatedSoilAnalysis.Potassium;
            existingAnalysis.Phosphorus = updatedSoilAnalysis.Phosphorus;
            existingAnalysis.Location = updatedSoilAnalysis.Location;
            soilAnalysisRepository.Save(existingAnalysis);
        }
        else
        {
            throw new UnauthorizedAccessException("Only administrators can edit soil data.");
        }
    }

    // Метод для оновлення рекомендацій щодо добрив
    public void UpdateFertilizerRecommendation(int recommendationId, FertilizerRecommendation updatedRecommendation)
    {
        FertilizerRecommendation existingRecommendation = fertilizerRecommendationRepository.FindById(recommendationId);

        // Перевірка прав адміністратора для редагування
        if (IsAdmin())
        {
            existingRecommendation.RecommendedFertilizer = updatedRecommendation.RecommendedFertilizer;
            existingRecommendation.Dosage = updatedRecommendation.Dosage;
            fertilizerRecommendationRepository.Save(existingRecommendation);
        }
        else
        {
            throw new UnauthorizedAccessException("Only administrators can edit fertilizer recommendations.");
        }
    }

    // Метод для перевірки прав адміністратора
    private bool IsAdmin()
    {
        // Логіка для перевірки ролі адміністратора
        return true; // Повертає true, якщо користувач є адміністратором
    }
}

Пояснення
SoilAnalysisService: Цей клас надає методи для генерування рекомендацій та звітів на основі аналізу ґрунту. В залежності від значення pH ґрунту, він обирає відповідні рекомендації.

AdminService: Цей клас дозволяє адміністраторам редагувати дані аналізів ґрунту та рекомендацій щодо добрив. Перед редагуванням перевіряється, чи має користувач права адміністратора через метод IsAdmin().

