Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 2
з дисципліни «Аналіз та рефакторинг коду»
на тему «Розробка бази даних для серверної частини
програмної системи та прикладного програмного інтерфейсу (API)»




Виконав
студент групи ПЗПІ-22-7
	

Сахань Дмитро Олександрович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	











Харків, 2024
2.1 Мета роботи


Розробити базу даних для серверної частини програмної системи та прикладного програмного інтерфейсу.


2.2 Хід роботи


        Для розробки серверної частини програмної системи було обрано такі технології та інструменти:
* С№ — основна мова програмування завдяки її широкій екосистемі бібліотек, підтримці різних парадигм програмування та активній спільноті розробників.
* Microsoft SQL Server — система управління базами даних, де зберігаються створені таблиці програмної системи.
        Серверна частина програмної системи побудована за багатошаровою архітектурою, яка забезпечує модульність, повторне використання коду та простоту масштабування. Основні компоненти архітектури:
* База даних:
   * Постійне зберігання інформації про данні грунту,Локації, та інші дані.
   * Всі таблиці та зв’язки між ними спроєктовані відповідно до ER-діаграми (рисунок 2).


Перед розробкою серверної частини було створено відповідну UML-діаграму прецедентів для кращого розуміння майбутньої роботи (рисунок 1).

                                           Рисунок 1 — UML-діаграма прецедентів серверної частини


   Створено ER-діаграму для визначення з таблицями, які необхідно створити (рисунок 2).
  

                                                            Рисунок 2 — ER-діаграма даних


У відповідності до ER-діаграми було створено базу даних на Microsoft SQL Server (див. додаток А).


Рисунок 3 — Діаграма структури БД

Фрагменти програмного коду з логікою взаємодії серверної частини з БД та клієнтами дивіться в додатках Б та В відповідно.


2.3 Висновки




        Виконуючи лабораторну роботу, було покладено початок в розробку серверної частини проєкту та було створено програму для взаємодії 
        Посилання на відеопрезентацію: 
Посилання на Github-репозиторій: https://github.com/Jopselion/arkpz-pzpi-22-7-sakhan-dmytro/edit/main/Task2
Посилання на Github-репозиторій проекту: https://github.com/Jopselion/arkpz-pzpi-22-7-sakhan-dmytro_program_file




ДОДАТОК А
SQL-скрипт створення БД
1. Запрос для создания таблицы fertilizer_recommendations:
CREATE TABLE [Проект_Земля].[dbo].[fertilizer_recommendations] (
    [id] INT IDENTITY(1,1) PRIMARY KEY, 
    [analysis_id] INT NOT NULL,
    [recommended_fertilizer] VARCHAR(255) NOT NULL,
    [dosage] DECIMAL(10,2) NOT NULL,
    [recommendation_text] TEXT NOT NULL,
    FOREIGN KEY ([analysis_id]) REFERENCES [Проект_Земля].[dbo].[soil_analysis]([id])
);

2. Запрос для создания таблицы planting_seasons:
CREATE TABLE [Проект_Земля].[dbo].[planting_seasons] (
    [id] INT IDENTITY(1,1) PRIMARY KEY,
    [crop] VARCHAR(255) NOT NULL,
    [season] VARCHAR(255) NOT NULL,
    [notes] TEXT
);

3. Запрос для создания таблицы soil_analysis:
CREATE TABLE [Проект_Земля].[dbo].[soil_analysis] (
    [id] INT IDENTITY(1,1) PRIMARY KEY,
    [user_id] INT NOT NULL,
    [analysis_date] DATETIME NOT NULL,
    [location] VARCHAR(255) NOT NULL,
    [ph] DECIMAL(5,2) NOT NULL,
    [nitrogen] DECIMAL(5,2) NOT NULL,
    [potassium] DECIMAL(5,2) NOT NULL,
    [phosphorus] DECIMAL(5,2) NOT NULL,
    [moisture] DECIMAL(5,2) NOT NULL,
    [density] DECIMAL(5,2) NOT NULL,
    [crop] VARCHAR(255) NOT NULL,
    FOREIGN KEY ([user_id]) REFERENCES [Проект_Земля].[dbo].[users]([id])
);

4. Запрос для создания таблицы users:
CREATE TABLE [Проект_Земля].[dbo].[users] (
    [id] INT IDENTITY(1,1) PRIMARY KEY,
    [username] VARCHAR(255) NOT NULL,
    [password_hash] VARCHAR(255) NOT NULL,
    [role] VARCHAR(50) NOT NULL,
    [created_at] DATETIME DEFAULT GETDATE() NOT NULL
);

5. Запрос для создания таблицы weather_data:
CREATE TABLE [Проект_Земля].[dbo].[weather_data] (
    [id] INT IDENTITY(1,1) PRIMARY KEY,
    [analysis_id] INT NOT NULL,
    [temperature] DECIMAL(5,2) NOT NULL,
    [humidity] DECIMAL(5,2) NOT NULL,
    [precipitation] DECIMAL(5,2) NOT NULL,
    [wind_speed] DECIMAL(5,2) NOT NULL,
    [weather_notes] TEXT,
    FOREIGN KEY ([analysis_id]) REFERENCES [Проект_Земля].[dbo].[soil_analysis]([id])
);


ДОДАТОК Б
Фрагмент програмного коду, пов’язаного з логікою взаємодії серверної частини з БД
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace WinFormsApp4._5
{
    public partial class PlantingSeasonsForm : Form
    {
        private string connectionString = "Data Source=JOPS;Initial Catalog=Проект_Земля;Integrated Security=True;Encrypt=False"; // Ваша строка подключения

        public PlantingSeasonsForm()
        {
            InitializeComponent();
        }

        private void PlantingSeasonsForm_Load(object sender, EventArgs e)
        {
            LoadData();
        }

        // Загрузка данных в DataGridView
        private void LoadData()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = "SELECT * FROM planting_seasons";
                SqlDataAdapter dataAdapter = new SqlDataAdapter(query, connection);
                DataTable dataTable = new DataTable();
                dataAdapter.Fill(dataTable);
                dataGridView.DataSource = dataTable;
            }
        }

        // Обработчик кнопки "Сохранить" — обновление данных в БД
        private void saveButton_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(idTextBox.Text))
            {
                MessageBox.Show("Выберите строку для редактирования.");
                return;
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = "UPDATE planting_seasons SET crop = @crop, season = @season, notes = @notes WHERE id = @id";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@id", idTextBox.Text);
                command.Parameters.AddWithValue("@crop", cropTextBox.Text);
                command.Parameters.AddWithValue("@season", seasonComboBox.SelectedItem.ToString());
                command.Parameters.AddWithValue("@notes", notesTextBox.Text);

                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }

            MessageBox.Show("Данные обновлены.");
            LoadData(); // Перезагружаем данные в DataGridView
        }

        // Обработчик кнопки "Удалить" — удаление строки из БД
        private void deleteButton_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(idTextBox.Text))
            {
                MessageBox.Show("Выберите строку для удаления.");
                return;
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = "DELETE FROM planting_seasons WHERE id = @id";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@id", idTextBox.Text);

                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }

            MessageBox.Show("Данные удалены.");
            LoadData(); // Перезагружаем данные в DataGridView
        }

        // Обработчик кнопки "Добавить" — добавление новой строки в БД
        private void addButton_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(cropTextBox.Text) || string.IsNullOrEmpty(seasonComboBox.SelectedItem?.ToString()) || string.IsNullOrEmpty(notesTextBox.Text))
            {
                MessageBox.Show("Пожалуйста, заполните все поля.");
                return;
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = "INSERT INTO planting_seasons (crop, season, notes) VALUES (@crop, @season, @notes)";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@crop", cropTextBox.Text);
                command.Parameters.AddWithValue("@season", seasonComboBox.SelectedItem.ToString());
                command.Parameters.AddWithValue("@notes", notesTextBox.Text);

                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }

            MessageBox.Show("Данные добавлены.");
            LoadData(); // Перезагружаем данные в DataGridView
        }

        // Обновление полей при изменении выбранной строки в DataGridView
        private void dataGridView_SelectionChanged(object sender, EventArgs e)
        {
            if (dataGridView.SelectedRows.Count > 0)
            {
                int selectedRowIndex = dataGridView.SelectedRows[0].Index;
                idTextBox.Text = dataGridView.Rows[selectedRowIndex].Cells[0].Value.ToString();
                cropTextBox.Text = dataGridView.Rows[selectedRowIndex].Cells[1].Value.ToString();
                seasonComboBox.SelectedItem = dataGridView.Rows[selectedRowIndex].Cells[2].Value.ToString();
                notesTextBox.Text = dataGridView.Rows[selectedRowIndex].Cells[3].Value.ToString();
            }
        }

        private void dataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}

ДОДАТОК В
Фрагмент програмного коду, пов’язаного з логікою взаємодії серверної частини з клієнтами
Реєстрація, авторизація користувача та читання його даних:
using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace WinFormsApp4._5
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Any necessary actions when the form loads
        }

        // Login button handler
        private void btnLogin_Click(object sender, EventArgs e)
        {
            string connectionString = "Data Source=JOPS;Initial Catalog=Проект_Земля;Integrated Security=True;Encrypt=False";
            string username = txtUsername.Text;  // Username
            string password = txtPassword.Text;  // Password

            // Validate if username and password are provided
            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
            {
                MessageBox.Show("Будь ласка, введіть ім'я користувача та пароль.");
                return;
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                try
                {
                    connection.Open();

                    // Query to check user data from the database
                    string query = "SELECT COUNT(*) FROM users WHERE username = @username AND password_hash = @password";
                    SqlCommand command = new SqlCommand(query, connection);
                    command.Parameters.AddWithValue("@username", username);
                    command.Parameters.AddWithValue("@password", GetHashedPassword(password)); // Hash the password for comparison

                    int userCount = (int)command.ExecuteScalar();

                    if (userCount > 0)
                    {
                        MessageBox.Show("Вхід успішний!");
                        // Open the main form of the application
                        Form3 mainForm = new Form3();  // Main application form
                        mainForm.Show();
                        this.Hide(); // Hide the current form
                    }
                    else
                    {
                        MessageBox.Show("Невірне ім'я користувача або пароль.");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Помилка при підключенні до бази даних: " + ex.Message);
                }
            }
        }

        // Register button handler
        private void btnRegister_Click(object sender, EventArgs e)
        {
            Form2 registerForm = new Form2();  // Registration form
            registerForm.Show();
            this.Hide(); // Hide the current form
        }

        // Password hashing method
        private string GetHashedPassword(string password)
        {
            using (var sha256 = System.Security.Cryptography.SHA256.Create())
            {
                byte[] bytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
                return Convert.ToBase64String(bytes);
            }
        }

        // Show/Hide password button handler
        private void btnShowPassword_Click(object sender, EventArgs e)
        {
            if (txtPassword.PasswordChar == '*')
            {
                txtPassword.PasswordChar = '\0';  // Show the text
                btnShowPassword.Text = "🙈"; // Change icon to "Hide"
            }
            else
            {
                txtPassword.PasswordChar = '*';  // Hide password
                btnShowPassword.Text = "👁️"; // Change icon to "Show"
            }
        }

        private void txtUsername_TextChanged(object sender, EventArgs e)
        {

        }
    }
}













